-- 为监控对象&校验对象添加任务参数属性
ALTER TABLE dq_monitor add task_params text NOT NULL COMMENT '任务参数';
ALTER TABLE dq_verify add task_params text NOT NULL COMMENT '任务参数';


-- 添加任务参数的模版表
CREATE TABLE `dq_task_param_template` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `gmt_create` datetime DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime DEFAULT CURRENT_TIMESTAMP,
  `is_deleted` tinyint(1) NOT NULL DEFAULT '0' COMMENT '0正常 1逻辑删除',
  `compute_type` int(11) DEFAULT NULL,
  `engine_type` int(11) DEFAULT NULL,
  `params` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

INSERT INTO `dq_task_param_template` VALUES ('1', now(), now(), '0', '0', '0', '##sql prefix is only useful for SQL ,mr prefix is only useful for MR ,no prefix is  useful for MR and SQL\r\n\r\n\r\n##The entire SQL job concurrency settings\r\n#sql.env.parallelism=1\r\n\r\n##The entire SQL job max concurrency settings\r\n#sql.max.env.parallelism=1\r\n\r\n\r\n##Sets the maximum time frequency (milliseconds) for the flushing of the\r\n##output buffers. By default the output buffers flush frequently to provide\r\n##low latency and to aid smooth developer experience. Setting the parameter\r\n##can result in three logical modes:\r\n#sql.buffer.timeout.millis=100\r\n\r\n#Time interval between state checkpoints in milliseconds\r\nsql.checkpoint.interval=60000\r\n\r\n#one of EXACTLY_ONCE,AT_LEAST_ONCE , the default val is EXACTLY_ONCE\r\n#sql.checkpoint.mode=EXACTLY_ONCE\r\n\r\n#The checkpoint timeout, in milliseconds,The default timeout of a checkpoint attempt: 10 minutes\r\n#sql.checkpoint.timeout=600000\r\n\r\n#The maximum number of concurrent checkpoint attempts,The default limit of concurrently happening checkpoints: one\r\n#sql.max.concurrent.checkpoints=1\r\n\r\n#Cleanup behaviour for persistent checkpoints. one of true or false\r\n#sql.checkpoint.cleanup.mode=true\r\n\r\n\r\n##The entire MR job concurrency settings \r\n##Only when the program itself does not specify a degree of parallelism parameter takes effect\r\n#mr.job.parallelism=1\r\n');
INSERT INTO `dq_task_param_template` VALUES ('2', now(), now(), '0', '0', '1', '##sql prefix is only useful for SQL ,mr prefix is only useful for MR ,no prefix is  useful for MR and SQL\r\n\r\n\r\n##The entire SQL job concurrency settings\r\n#sql.env.parallelism=1\r\n\r\n##The entire SQL job max concurrency settings\r\n#sql.max.env.parallelism=1\r\n\r\n\r\n##Sets the maximum time frequency (milliseconds) for the flushing of the\r\n##output buffers. By default the output buffers flush frequently to provide\r\n##low latency and to aid smooth developer experience. Setting the parameter\r\n##can result in three logical modes:\r\n#sql.buffer.timeout.millis=100\r\n\r\n#Time interval between state checkpoints in milliseconds\r\nsql.checkpoint.interval=60000\r\n\r\n#one of EXACTLY_ONCE,AT_LEAST_ONCE , the default val is EXACTLY_ONCE\r\n#sql.checkpoint.mode=EXACTLY_ONCE\r\n\r\n#The checkpoint timeout, in milliseconds,The default timeout of a checkpoint attempt: 10 minutes\r\n#sql.checkpoint.timeout=600000\r\n\r\n#The maximum number of concurrent checkpoint attempts,The default limit of concurrently happening checkpoints: one\r\n#sql.max.concurrent.checkpoints=1\r\n\r\n#Cleanup behaviour for persistent checkpoints. one of true or false\r\n#sql.checkpoint.cleanup.mode=true\r\n\r\n\r\n##The entire MR job concurrency settings \r\n##Only when the program itself does not specify a degree of parallelism parameter takes effect\r\n#mr.job.parallelism=1\r\n');
INSERT INTO `dq_task_param_template` VALUES ('3', now(), now(), '0', '1', '1', '##Number of CPU cores need driver program is running\n##driver.cores=1\n\n##Each Spark action (collect) limits the total size of the serialized results of all partitions. Setting value should not be less than 1M, 0 means no limit. If the total exceeds this limit, the program will terminate. Limit values may cause memory overflow error driver (dependent on spark. driver. memory and objects in the JVM\'s memory consumption).\n##driver.maxResultSize=1g\n\n##Driver number memory used by a process\n##driver.memory=512m\n\n\n##Amount of memory used by each executor process. And JVM memory strings have the same format (for example, 512m, 2G)\n##executor.memory=512m\n\n\n##Amount of memory used by each executor process. And JVM memory strings have the same format (for example, 512m, 2G)\n##logConf=spark.logConf');
INSERT INTO `dq_task_param_template` VALUES ('4', now(), now(), '0', '1', '0', '##sql prefix is only useful for SQL ,mr prefix is only useful for MR ,no prefix is  useful for MR and SQL\r\n\r\n\r\n##The entire SQL job concurrency settings\r\n#sql.env.parallelism=1\r\n\r\n##The entire SQL job max concurrency settings\r\n#sql.max.env.parallelism=1\r\n\r\n\r\n##Sets the maximum time frequency (milliseconds) for the flushing of the\r\n##output buffers. By default the output buffers flush frequently to provide\r\n##low latency and to aid smooth developer experience. Setting the parameter\r\n##can result in three logical modes:\r\n#sql.buffer.timeout.millis=100\r\n\r\n#Time interval between state checkpoints in milliseconds\r\nsql.checkpoint.interval=60000\r\n\r\n#one of EXACTLY_ONCE,AT_LEAST_ONCE , the default val is EXACTLY_ONCE\r\n#sql.checkpoint.mode=EXACTLY_ONCE\r\n\r\n#The checkpoint timeout, in milliseconds,The default timeout of a checkpoint attempt: 10 minutes\r\n#sql.checkpoint.timeout=600000\r\n\r\n#The maximum number of concurrent checkpoint attempts,The default limit of concurrently happening checkpoints: one\r\n#sql.max.concurrent.checkpoints=1\r\n\r\n#Cleanup behaviour for persistent checkpoints. one of true or false\r\n#sql.checkpoint.cleanup.mode=true\r\n\r\n\r\n##The entire MR job concurrency settings \r\n##Only when the program itself does not specify a degree of parallelism parameter takes effect\r\n#mr.job.parallelism=1\r\n');



